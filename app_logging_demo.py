import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import squarify
import random
import base64
import logging
import time
from datetime import datetime, timedelta

from tensorflow.keras import backend as K
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, GRU
from tensorflow.keras.optimizers import Adam
from vnstock import Vnstock

# C·∫•u h√¨nh logging
logging.basicConfig(
    filename='app_log.txt',
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

st.set_page_config(
    page_title="Applying deep learning to portfolio optimization in the Vietnamese stock market", 
    page_icon="üìä"
)

plt.switch_backend('Agg')

SEED_VALUE = 42
random.seed(SEED_VALUE)
np.random.seed(SEED_VALUE)
tf.random.set_seed(SEED_VALUE)

import warnings
warnings.filterwarnings('ignore')

def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file_obj:
        encoded_string = base64.b64encode(image_file_obj.read())
    css_code = f"""
    <style>
    .stApp {{
        background-image: url(data:image/png;base64,{encoded_string.decode()}); 
        background-size: cover; 
        background-color: rgba(255, 255, 255, 0.8); 
        background-blend-mode: overlay; 
    }}
    .custom-title {{
        color: #F05454;
    }}
    .stMarkdown, .stText {{
        color: #30475E !important;
    }}
    </style>
    """
    st.markdown(css_code, unsafe_allow_html=True)

def main():
    start_time = time.time()
    logging.info("üöÄ Ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu ch·∫°y ·ª©ng d·ª•ng.")

    st.title("üìà ·ª®ng d·ª•ng Demo T·ªëi ∆∞u danh m·ª•c - LSTM-GRU (c√≥ ghi log)")
    st.markdown("·ª®ng d·ª•ng n√†y ghi l·∫°i to√†n b·ªô qu√° tr√¨nh x·ª≠ l√Ω v√†o `app_log.txt` ƒë·ªÉ theo d√µi hi·ªáu su·∫•t.")

    if st.button("B·∫Øt ƒë·∫ßu demo ghi log"):
        logging.info("üü¢ Ng∆∞·ªùi d√πng nh·∫•n n√∫t b·∫Øt ƒë·∫ßu demo.")
        time.sleep(2)
        logging.info("üß† M√¥ ph·ªèng x·ª≠ l√Ω m√¥ h√¨nh xong.")

    end_time = time.time()
    logging.info(f"üéØ ·ª®ng d·ª•ng ho√†n th√†nh sau {end_time - start_time:.2f} gi√¢y.")

    # Hi·ªÉn th·ªã log
    with st.expander("üìÑ Xem log h·ªá th·ªëng"):
        try:
            with open("app_log.txt", "r") as f:
                log_content = f.read()
            st.text_area("üìã Log n·ªôi b·ªô:", value=log_content, height=300)
        except FileNotFoundError:
            st.info("Ch∆∞a c√≥ log n√†o ƒë∆∞·ª£c ghi.")

if __name__ == '__main__':
    main()
